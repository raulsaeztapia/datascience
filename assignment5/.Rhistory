setwd("~/datascience/assignment5")
setwd("/home/user/datascience/assignment5")
seaflow <- read.csv("seaflow_21min.csv")
## 75% of the sample size
smp_size <- floor(0.25 * nrow(seaflow))
## set the seed to make your partition reproductible
set.seed(123)
train_ind <- sample(seq_len(nrow(seaflow)), size = smp_size)
# we create both dataframes
train <- seaflow[train_ind, ]
library(rpart)
library(rattle)
library(rpart.plot)
library(RColorBrewer)
library(randomForest)
fit <- randomForest(formula = pop ~ fsc_small + fsc_perp + fsc_big + pe + chl_big + chl_small, method="class", data=train)
fancyRpartPlot(fit)
fancyRpartPlot(fit)
varImpPlot(fit)
Prediction <- predict(fit, test, type = "class")
Prediction <- predict(fit, seaflow, type = "class")
# el resultado sera 1 o 0
seaflow$pop_result <- Prediction == seaflow$pop
sum(seaflow$pop_result) / length(seaflow$pop_result)
varImpPlot(fit)
importance(fit)
fit <- svm(formula = pop ~ fsc_small + fsc_perp + fsc_big + pe + chl_big + chl_small, data=train)
# ahora instalamos el paquete de e1071
install.packages('e1071')
library(e1071)
fit <- svm(formula = pop ~ fsc_small + fsc_perp + fsc_big + pe + chl_big + chl_small, data=train)
Prediction <- predict(fit, seaflow, type = "class")
seaflow$pop_result <- Prediction == seaflow$pop
sum(seaflow$pop_result) / length(seaflow$pop_result)
fit <- svm(formula = pop ~ fsc_small + fsc_perp + fsc_big, data=train)
Prediction <- predict(fit, seaflow, type = "class")
seaflow$pop_result <- Prediction == seaflow$pop
sum(seaflow$pop_result) / length(seaflow$pop_result)
## 75% of the sample size
smp_size <- floor(0.75 * nrow(seaflow))
## set the seed to make your partition reproductible
set.seed(123)
train_ind <- sample(seq_len(nrow(seaflow)), size = smp_size)
train <- seaflow[train_ind, ]
library('ggplot2')
qplot(pe, chl_small, data = train, color = pop)
fit <- rpart(formula = pop ~ fsc_small + fsc_perp + fsc_big + pe + chl_big + chl_small, method="class", data=train)
fancyRpartPlot(fit)
smp_size <- floor(0.25 * nrow(seaflow))
set.seed(123)
train_ind <- sample(seq_len(nrow(seaflow)), size = smp_size)
# we create both dataframes
train <- seaflow[train_ind, ]
fit <- rpart(formula = pop ~ fsc_small + fsc_perp + fsc_big + pe + chl_big + chl_small, method="class", data=train)
fancyRpartPlot(fit)
Prediction <- predict(fit, seaflow, type = "class")
table(pred = Prediction, true = seaflow$pop)
library(randomForest)
# generamos una formula y random forest
fit <- randomForest(formula = pop ~ fsc_small + fsc_perp + fsc_big + pe + chl_big + chl_small, method="class", data=train)
# generamos la prediccion
Prediction <- predict(fit, seaflow, type = "class")
table(pred = Prediction, true = seaflow$pop)
library(e1071)
fit <- svm(formula = pop ~ fsc_small + fsc_perp + fsc_big + pe + chl_big + chl_small, data=train)
Prediction <- predict(fit, seaflow, type = "class")
# pintamos la tabla de la particion contra el campo pop
table(pred = Prediction, true = seaflow$pop)
summary.data.frame(train)
seaflow$pop_result <- Prediction == seaflow$pop
sum(seaflow$pop_result) / length(seaflow$pop_result)
summary.data.frame(train)
qplot(pe, chl_small, data = train, color = pop)
qplot(fsc_big, chl_big, data = train, color = pop)
qplot(fsc_big, pe, data = train, color = pop)
qplot(fsc_big, chl_big, data = train, color = pop)
qplot(pe, fsc_big, data = train, color = pop)
qplot(pe, fsc_small, data = train, color = pop)
# Plot pe against chl_small  and color by pop
qplot(pe, fsc_perp, data = train, color = pop)
qplot(pe, fsc_big, data = train, color = pop)
qplot(time, chl_big, data = train, color = pop)
qplot(chl_big, time, data = train, color = pop)
qplot(time, chl_big, data = train, color = pop)
setwd("/home/user/datascience/assignment5")
seaflow <- read.csv("seaflow_21min_sin_208.csv")
## 75% of the sample size
smp_size <- floor(0.25 * nrow(seaflow))
## set the seed to make your partition reproductible
set.seed(123)
train_ind <- sample(seq_len(nrow(seaflow)), size = smp_size)
# we create both dataframes
train <- seaflow[train_ind, ]
fit <- rpart(formula = pop ~ fsc_small + fsc_perp + fsc_big + pe + chl_big + chl_small, method="class", data=train)
fancyRpartPlot(fit)
Prediction <- predict(fit, seaflow, type = "class")
table(pred = Prediction, true = seaflow$pop)
fit <- randomForest(formula = pop ~ fsc_small + fsc_perp + fsc_big + pe + chl_big + chl_small, method="class", data=train)
varImpPlot(fit)
importance(fit)
Prediction <- predict(fit, seaflow, type = "class")
table(pred = Prediction, true = seaflow$pop)
fit <- svm(formula = pop ~ fsc_small + fsc_perp + fsc_big + pe + chl_big + chl_small, data=train)
Prediction <- predict(fit, seaflow, type = "class")
table(pred = Prediction, true = seaflow$pop)
summary.data.frame(train)
qplot(time, chl_big, data = train, color = pop)
fit <- rpart(formula = pop ~ fsc_small + fsc_perp + fsc_big + pe + chl_big + chl_small, method="class", data=train)
Prediction <- predict(fit, seaflow, type = "class")
seaflow$pop_result <- Prediction == seaflow$pop
# comprobamos cuan precisa a sido nuestra respuesta -- el resultado sera entre 0 y 1
sum(seaflow$pop_result) / length(seaflow$pop_result)
fit <- randomForest(formula = pop ~ fsc_small + fsc_perp + fsc_big + pe + chl_big + chl_small, method="class", data=train)
Prediction <- predict(fit, seaflow, type = "class")
seaflow$pop_result <- Prediction == seaflow$pop
# comprobamos cuan precisa a sido nuestra respuesta -- el resultado sera entre 0 y 1
sum(seaflow$pop_result) / length(seaflow$pop_result)
fit <- svm(formula = pop ~ fsc_small + fsc_perp + fsc_big + pe + chl_big + chl_small, data=train)
Prediction <- predict(fit, seaflow, type = "class")
seaflow$pop_result <- Prediction == seaflow$pop
# comprobamos cuan precisa a sido nuestra respuesta -- el resultado sera entre 0 y 1
sum(seaflow$pop_result) / length(seaflow$pop_result)
importance(fit)
fit <- randomForest(formula = pop ~ fsc_small + fsc_perp + fsc_big + pe + chl_big + chl_small, method="class", data=train)
importance(fit)
varImpPlot(fit)
setwd("~/datascience/assignment5")
